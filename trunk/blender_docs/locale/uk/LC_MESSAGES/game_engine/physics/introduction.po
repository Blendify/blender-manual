# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is public domain as CC0
# This file is distributed under the same license as the Blender Reference
# Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
# urko <urkokul@gmail.com>, 2017.
#
msgid ""
msgstr "Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: urko <urkokul@gmail.com>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"X-Generator: Poedit 2.0.2\n"
"Language: uk\n"

#: ../../manual/game_engine/physics/introduction.rst:4
msgid "Introduction"
msgstr "Вступ"

#: ../../manual/game_engine/physics/introduction.rst:6
msgid ""
"Blender includes advanced physics simulation in the form of the Bullet "
"Physics Engine (`Bullet Physics <http://bulletphysics.org>`__). Most of your "
"work will involve setting the right properties on the objects in your scene, "
"then you can sit back and let the engine take over. The physics simulation "
"can be used for Games, but also for Animation."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:12
msgid ""
"The Blender Game Engine (BGE) is based on Rigid-Body Physics, which differs "
"significantly from the complementary set of tools available in the form of "
"Soft Body Physics Simulations. Though the BGE does have a Soft Body type, it "
"is not nearly as nuanced as the non-BGE Soft Body. The inverse is even more "
"true: it is difficult to get the non-BGE physics to resemble anything like a "
"stiff shape. Rigid Body Physics does not have, as an effect or a cause, any "
"mesh deformations. For a discussion on how to partially overcome this, see: "
"`Mesh Deformations`_."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:24
msgid "Global Options"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:26
msgid ""
"The global Physics Engine settings can be found in the :doc:`World "
"Properties </game_engine/physics/world>`, which include the Gravity constant "
"and some important engine performance tweaks."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:31
msgid "Object Physics"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:39
msgid "Physics Type"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:41
msgid ":doc:`No Collision </game_engine/physics/types/no_collision>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:42
msgid "Is not affected by the simulation nor affects other objects."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:43
msgid ":doc:`Static </game_engine/physics/types/static>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:44
msgid ""
"Participates in the simulation, affecting other objects, but is not affected "
"by it."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:45
msgid ":doc:`Dynamic </game_engine/physics/types/dynamic>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:46
msgid "Object that can move besides colliding and being collided with."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:47
msgid ":doc:`Rigid Body </game_engine/physics/types/rigid_body>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:48
msgid "Has rigid body dynamics."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:49
msgid ":doc:`Soft Body </game_engine/physics/types/soft_body>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:50
msgid "Soft body dynamics."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:51
msgid ":doc:`Character Controller </game_engine/physics/types/character>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:52
msgid "Character controller."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:53
msgid ":doc:`Vehicle Controller </game_engine/physics/types/vehicle>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:54
msgid "Vehicle controller."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:55
msgid ":doc:`Occluder </game_engine/physics/types/occluder>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:56
msgid "Prevents calculation of rendered objects (not their physics, though!)."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:57
msgid ":doc:`Sensor </game_engine/physics/types/sensor>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:58
msgid "Detects presence without restituting collisions."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:61
msgid ":doc:`Navigation Mesh </game_engine/physics/types/navigation_mesh>`"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:60
msgid "To make pathfinding paths. Useful for Artificial Intelligence."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:64
msgid "Material Physics"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:66
msgid ""
"Physics can be associated with a material on the material properties tab. "
"These are settings that one would normally associate with a material, such "
"has its friction and they are meant to be used in conjunction with the "
"object physics settings, not replace it."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:73
msgid "Constraints"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:75
msgid ""
"It is imperative to understand that the Blender Constraints generally do not "
"work inside the BGE. This means interesting effects such as *Copy Rotation* "
"are unavailable directly."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:78
msgid "Your options include:"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:80
msgid ""
":doc:`Parenting </editors/3dview/object/properties/relations/parents>` - But "
"not Vertex Parenting."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:81
msgid ""
":doc:`Rigid Body Joint </rigging/constraints/relationship/rigid_body_joint>` "
"-- This is the one Constraint that you can set up through the UI that works "
"in the BGE. It has several options, and can be very powerful -- see ITS page "
"for a detailed description and demo blend-file. Do not forget that you can "
"loop through objects using ``bpy`` instead of clicking thousands of times to "
"set up chains of these Constraints."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:86
msgid ""
"Rigid Body Joints on the Fly -- You can add/remove them after the BGE starts "
"by using ``bge.constraints.createConstraint()``. This can be good either to "
"simply automate their setup, or to truly make them dynamic. A simple demo "
"can be viewed in: `BGE-Physics-DynamicallyCreateConstraint.blend <https://"
"wiki.blender.org/index.php/Media:BGE-Physics-DynamicallyCreateConstraint."
"blend>`__"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:91
msgid ""
":doc:`Python Controllers </game_engine/logic/controllers/types/python>` -- "
"As always, in the BGE, you can get the most power when you drop into Python "
"and start toying with the settings directly. For instance, the *Copy "
"Rotation* mentioned above is not hard -- All you have to do is something to "
"the effect of ``own.worldOrientation = bge.logic.getCurrentScene()."
"objects['TheTargetObject'].worldOrientation``"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:99
msgid "Visualizing Physics"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:103
msgid ""
"Go to :menuselection:`Game --> Show Physics Visualization` to show lines "
"representing various attributes of the Bullet representation of your "
"objects. Note that these might be easier to see when you turn on Wireframe "
"Mode :kbd:`Z` before you press :kbd:`P`. Also note that you can see how the "
"Bullet triangulation is working (it busts all your Quads to Tris at run-"
"time, but the BGE meshes are still quads at run-time)."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:111
msgid ""
"*RGB/XYZ Widget* - Representing the object's Local Orientation and Origin."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:112
msgid ""
"*Green* - \"sleeping meshes\" that are not moving, saving calculations until "
"an external event \"wakes\" it."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:113
msgid ""
"*White* - White lines represent active bounding meshes at are undergoing "
"physics calculations, until such calculations are so small that the object "
"is put to rest. This is how you can see the effects of the *Collision "
"Bounds*. - *Thick*, or *Many White Lines* - A compound collision mesh/meshes."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:117
msgid "*Violet* - Bounding meshes for Soft bodies."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:118
msgid ""
"*Red* - The Bounding Box, the outer boundary of object. It is always aligned "
"with global X Y and Z, and is used to optimize calculations. Also represents "
"meshes that have been forced into \"no sleep\" status."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:121
msgid "*Yellow* - Normals."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:122
msgid "*Black* - When in wireframe, this is your mesh's visual appearance."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:124
msgid ""
"If you want finer-grained control over the display options, you can add this "
"as a Python Controller and uncomment whichever pieces you want to see::"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:134
msgid "For all debug modes, API docs for ``bge.constraints``."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:138
msgid "Show Framerate and Profile"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:142
msgid ""
"A shot of `Manual-BGE-Physics-DancingSticks.blend <https://wiki.blender.org/"
"index.php/Media:Manual-BGE-Physics-DancingSticks.blend>`__ with :"
"menuselection:`Game --> Show Framerate and Profile` enabled."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:147
msgid ""
"If you enable :menuselection:`Game --> Show Framerate and Profile`, it will "
"put some statistics in the upper-left area of the game window."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:152
msgid ""
"These can be very informative, but also a bit cryptic. Moguri has elaborated "
"on their meanings, for us: `Moguris blog <https://mogurijin.wordpress."
"com/2012/01/03/bge-profile-stats-and-what-they-mean/>`__."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:157
msgid "Mesh Deformations"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:159
msgid ""
"As mentioned above, Rigid Body physics do not affect mesh deformations, nor "
"do they account for them in the physics model. This leaves you with a few "
"options:"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:164
msgid "Soft Bodies"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:166
msgid ""
"You can try using a :doc:`Soft Body </game_engine/physics/types/soft_body>`, "
"but these are fairly hard to configure well."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:171
msgid "Actions"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:173
msgid ""
"To use an :doc:`Action Actuator </game_engine/logic/actuators/types/action>` "
"to do the deformation, you have to make a choice. If you use Shapekeys in "
"the Action, you will be fine as far as the overall collisions (but see below "
"for the note on ``reinstancePhysicsMesh()``). The mesh itself is both a "
"display and a physics mesh, so there is not much to configure."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:178
msgid ""
"To use an Armature as the deformer will require a bit of extra thought and "
"effort. Basically the Armature will only deform a mesh if the Armature is "
"the parent of that mesh. But at that point, your mesh will lose its physics "
"responsivenes, and only hang in the air (it is copying the location/rotation "
"of the Armature). To somewhat fix this you can then parent the Armature to a "
"collision mesh (perhaps a simple box or otherwise very-low-poly mesh). This "
"\"Deformation Mesh\" will be the physics representative, being type: Dynamic "
"or Rigid Body, but it will be set to Invisible. Then \"Display Mesh\" will "
"be the opposite set to *No Collision*, but visible. This still leaves the "
"problem mentioned in the previous paragraph."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:188
msgid ""
"When you deform a display mesh, it does not update the corresponding physics "
"mesh. You can view this evidently when you enable physics visualization "
"(`Visualizing Physics`_) -- the collision bounds will remain exactly as when "
"they began. To fix this, you must call ``own.reinstancePhysicsMesh()`` in "
"some form. Currently this only works on *Triangle Mesh* bounds, not *Convex "
"Hull*. We have prepared a demonstration file in `Manual-BGE-Physics-"
"DancingSticks.blend <https://wiki.blender.org/index.php/Media:Manual-BGE-"
"Physics-DancingSticks.blend>`__. Note that we had to increase the :"
"menuselection:`World --> Physics --> Physics Steps --> Substeps` to make the "
"collisions work well. The more basic case is the case the Shapekeyed Action, "
"which you can see in the back area of the scene. Since it is the only object "
"involved, you can call ``reinstancePhysicsMesh()`` unadorned, and it will do "
"the right thing."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:202
msgid ""
"The more complicated case is the :menuselection:`Collision Mesh --> Armature "
"--> Display Mesh` cluster, which you can see in the front of the scene. What "
"it does in the blend-file is call ``reinstancePhysicsMesh(viz)``, that is, "
"passing in a reference to the visual mesh. If we tried to establish this "
"relationship without the use of Python, we would find that Blender's "
"dependency check system would reject it as a cyclic setup. This is an "
"example of where Blender's checking is too coarsely-grained, as this circle "
"is perfectly valid: the grandparent object (the Collision Mesh) controls the "
"location/rotation, while the middle object (the Armature) receives the "
"animated Action, where the child (the Display Mesh) receives the "
"deformation, and passes that on up to the top, harmlessly. Something to note "
"is that the Collision Mesh is merely a plane -- that is all it requires for "
"this, since it will be getting the mesh data from ``viz``."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:218
msgid "Ragdolls"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:220
msgid ""
"A third option is to create your items out of many sub-objects, connected "
"together with Rigid Body Joints or similar. This can be quite a bit more "
"work, but the results can be much more like a realistic response to "
"collisions. For an Add-on that can help you out in the process, check out "
"the `Blender Ragdoll Implementation Kit <https://wiki.blender.org/index.php/"
"Extensions:2.6/Py/Scripts/Game_Engine/BRIK_ragdolls>`__."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:230
msgid "Digging Deeper"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:232
msgid "Sometimes you will want to look at:"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:234
msgid "The `main Bullet Physics page <http://bulletphysics.org/wordpress/>`__"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:235
msgid ""
"The `Bullet Wiki <http://www.bulletphysics.org/mediawiki-1.5.8/index.php?"
"title=Documentation>`__"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:236
msgid ""
"The `Bullet API Docs <http://www.continuousphysics.com/Bullet/BulletFull/"
"index.html>`__"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:237
msgid "The `Bullet Forums <http://www.bulletphysics.org/Bullet/phpBB3/>`__"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:241
msgid "Recording to Keyframes"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:243
msgid ""
"Beyond gaming, sometimes you wish to render a complex scene that involves "
"collisions, multiple forces, friction between multiple bodies, and air drag "
"or even a simple setup that is just easier to achieve using the realtime "
"physics."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:247
msgid ""
"Blender provides a way to ''bake'' or ''record'' a physics simulation into "
"keyframes allowing it then to be played as an action either for animation or "
"games. Keep in mind that the result of this method is a recording, no longer "
"a simulation. This means that the result is completely deterministic (the "
"same everytime it is run) and unable to interact with new objects that are "
"added to the physics simulation after it was recorded. This may, or not, be "
"desired according to the situation."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:257
msgid "Menu to record Keyframes to the Dopesheet."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:259
msgid ""
"All you have to do to achieve this effect is go to the Info Editor (the bar "
"at the top of the window) :menuselection:`Game --> Record Animation`, and it "
"will lock away your keyframes for use in *Blender Render* mode. You can go "
"back to the 3D View and press :kbd:`Alt-A` to play it back, or :kbd:`Ctrl-"
"F12` to render it out as an animation."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:265
msgid ""
"Note that you can also use Game Logic Bricks and scripting. Everything will "
"be recorded."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:269
msgid "Keyframe Clean-up"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:273
msgid "Resulting recorded animation."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:275
msgid ""
"*Record Animation* keys redundant data (data that was did not change "
"relative to the last frame). Pressing :kbd:`O` while in the *DopeSheet* will "
"remove all superfluous keyframes. Unwanted channels can also be removed."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:281
msgid "Cleaned up recording."
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:285
msgid "Exporting"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:288
msgid ".bullet / Bullet compatible engines"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:290
msgid ""
"You can snapshot the physics world at any time with the following code::"
msgstr ""

#: ../../manual/game_engine/physics/introduction.rst:296
msgid ""
"This will allow importing into other Bullet-based projects. See the `Bullet "
"Wiki on Serialization <http://bulletphysics.org/mediawiki-1.5.8/index.php/"
"Bullet_binary_serialization>`__ for more."
msgstr ""
