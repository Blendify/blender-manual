# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is public domain as CC0
# This file is distributed under the same license as the Blender Reference
# Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
# urko <urkokul@gmail.com>, 2016, 2017.
#
msgid ""
msgstr "Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: urko <urkokul@gmail.com>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"X-Generator: Poedit 2.0.2\n"
"Language: uk\n"

#: ../../manual/game_engine/python_api/videotexture.rst:4
msgid "The VideoTexture module: bge.texture"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:6
msgid ""
"The ``bge.texture`` module allows you to manipulate textures during the "
"game. Several sources for texture are possible: video files, image files, "
"video capture, memory buffer, camera render or a mix of that. The video and "
"image files can be loaded from the Internet using a URL instead of a file "
"name. In addition, you can apply filters on the images before sending them "
"to the GPU, allowing video effect: blue screen, color band, gray, normal "
"map. ``bge.texture`` uses FFmpeg to load images and videos. All the formats "
"and codecs that FFmpeg supports are supported by ``bge.texture``, including "
"but not limited to:"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:16
msgid "AVI"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:17
msgid "Ogg"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:18
msgid "Xvid"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:19
msgid "Theora"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:20
msgid "dv1394 camera"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:21
msgid "video4linux capture card (this includes many webcams)"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:22
msgid "videoForWindows capture card (this includes many webcams)"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:23
msgid "JPG"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:27
msgid "How it works"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:29
msgid ""
"The principle is simple: first you identify an existing texture by object "
"and name, then you create a new texture with dynamic content and swap the "
"two textures in the GPU. The GE is not aware of the substitution and "
"continues to display the object as always, except that you are now in "
"control of the texture. At the end, the new texture is deleted and the old "
"texture restored."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:35
msgid ""
"The present page is a guide to the ``bge.texture`` module with simple "
"examples."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:39
msgid "Game preparation"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:41
msgid ""
"Before you can use the thing ``bge.texture`` module, you must have objects "
"with textures applied appropriately."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:44
msgid ""
"Imagine you want to have a television showing live broadcast programs in the "
"game. You will create a television object and UV-apply a different texture "
"at the place of the screen, for example ``tv.png``. What this texture looks "
"like is not important; probably you want to make it dark gray to simulate "
"power-off state. When the television must be turned on, you create a dynamic "
"texture from a video capture card and use it instead of ``tv.png``: the TV "
"screen will come to life."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:51
msgid "You have two ways to define textures that ``bge.texture`` can grab:"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:53
msgid "Simple UV texture."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:54
msgid "Blender material with image texture channel."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:56
msgid ""
"Because ``bge.texture`` works at texture level, it is compatible with all GE "
"fancy texturing features: GLSL, multi-texture, custom shaders, etc."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:62
msgid "First example"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:64
msgid ""
"Let us assume that we have a game object with one or more faces assigned to "
"a material/image on which we want to display a video."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:67
msgid ""
"The first step is to create a ``Texture`` object. We will do it in a script "
"that runs once. It can be at the start of the game, the video is only played "
"when you refresh the texture; we will come to that later. The script is "
"normally attached to the object on which we want to display the video so "
"that we can easily retrieve the object reference::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:80
msgid ""
"The check on ``video`` attribute is just a trick to make sure we create the "
"texture only once."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:84
msgid "Find material"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:91
msgid ""
"``bge.texture.materialID()`` is a handy function to retrieve the object "
"material that is using ``video.png`` as texture. This method will work with "
"Blender material and UV texture. In case of UV texture, it grabs the "
"internal material corresponding to the faces that are assigned to this "
"texture. In case of Blender material, it grabs the material that has an "
"image texture channel matching the name as first channel."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:98
msgid ""
"The ``IM`` prefix indicates that we are searching for a texture name but we "
"can also search for a material by giving the ``MA`` prefix. For example, if "
"we want to find the material called ``VideoMat`` on this object, the code "
"becomes::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:106
msgid "Create texture"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:108
msgid ""
"``bge.texture.Texture`` is the class that creates the ``Texture`` object "
"that loads the dynamic texture on the GPU. The constructor takes one "
"mandatory and three optional arguments:"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:111
msgid "``gameObj``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:112
msgid "The game object."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:113
msgid "``materialID``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:114
msgid ""
"Material index as returned by ``bge.texture.materialID()``, 0 = first "
"material by default."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:116
msgid "``textureID``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:116
msgid ""
"Texture index in case of multi-texture channel, 0 = first channel by "
"default. In case of UV texture, this parameter should always be 0."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:123
msgid "``textureObj``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:119
msgid ""
"Reference to another ``Texture`` object of which we want to reuse the "
"texture. If we use this argument, we should not create any source on this "
"texture and there is no need to refresh it either: the other ``Texture`` "
"object will provide the texture for both materials/textures."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:131
msgid "Make texture persistent"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:133
msgid ""
"Note that we have assigned the object to a ``GameLogic``, ``video`` "
"attribute that we create for the occasion. The reason is that the "
"``Texture`` object must be persistent across the game scripts. A local "
"variable would be deleted at the end of the script and the GPU texture "
"deleted at the same time. ``GameLogic`` module object is a handy place to "
"store persistent objects."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:141
msgid "Create a source"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:143
msgid ""
"Now we have a ``Texture`` object but it cannot do anything because it does "
"not have any source. We must create a source object from one of the possible "
"sources available in ``bge.texture``:"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:149
msgid "``VideoFFmpeg``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:148
msgid "Moving pictures. Video file, video capture, video streaming."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:153
msgid "``ImageFFmpeg``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:152
msgid "Still pictures. Image file, image on web."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:157
msgid "``ImageBuff``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:156
msgid ""
"Image from application memory. For computer generated images, drawing "
"applications."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:160
msgid "``ImageViewport``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:160
msgid ""
"Part or whole of the viewport (=rendering of the active camera displayed on "
"screen)."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:163
msgid "``ImageRender``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:163
msgid "Render of a non active camera."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:166
msgid "``ImageMix``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:166
msgid "A mix of two or more of the above sources."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:168
msgid ""
"In this example we use a simple video file as source. The ``VideoFFmpeg`` "
"constructor takes a file name as argument. To avoid any confusion with the "
"location of the file, we will use ``GameLogic.expandPath ()`` to build an "
"absolute file name, assuming the video file is in the same directory as the "
"blend-file::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:178
msgid ""
"We create the video source object and assign it to the ``Texture`` object "
"``source`` attribute to set the source and make it persistent: as the "
"``Texture`` object is persistent, the source object will also be persistent."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:182
msgid ""
"Note that we can change the ``Texture`` source at any time. Suppose we want "
"to switch between two movies during the game."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:185
msgid "We can do the following::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:190
msgid "And then assign (and reassign) the source during the game::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:196
msgid "Setup the source"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:198
msgid ""
"The ``VideoFFmpeg`` source has several attributes to control the movie "
"playback:"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:203
msgid "``range``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:201
msgid ""
"[start,stop] (floats). Set the start and stop time of the video playback, "
"expressed in seconds from beginning. By default the entire video."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:207
msgid "``repeat``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:206
msgid "(integer). Number of video replay, -1 for infinite."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:211
msgid "``framerate``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:210
msgid "(float). Relative frame rate, <1.0 for slow, >1.0 for fast."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:219
msgid "``scale``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:214
msgid ""
"(bool). Set to True to activate fast nearest neighbor scaling algorithm. "
"Texture width and height must be a power of 2. If the video picture size is "
"not a power of 2, rescaling is required. By default ``bge.texture`` uses the "
"precise but slow ``gluScaleImage()`` function. Best is to rescale the video "
"offline so that no scaling is necessary at runtime!"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:224
msgid "``flip``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:222
msgid ""
"(bool). Set to True if the image must be vertically flipped. FFmpeg always "
"delivers the image upside down, so this attribute is set to True by default."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:230
msgid "``filter``"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:227
msgid ""
"Set additional filter on the video before sending to GPU. Assign to one of "
"``bge.texture`` filter object. By default the image is send unchanged to the "
"GPU. If an alpha channel is present in the video, it is automatically loaded "
"and sent to the GPU as well."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:232
msgid ""
"We will simply set the ``scale`` attribute to True because the "
"``gluScaleImage ()`` is really too slow for real time video. In case the "
"video dimensions are already a power of 2, it has no effect. ::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:240
msgid "Play the video"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:242
msgid "We are now ready to play the video::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:247
msgid ""
"Video playback is not a background process: it happens only when we refresh "
"the texture. So we must have another script that runs on every frame and "
"calls the ``refresh ()`` method of the ``Texture`` object::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:255
msgid ""
"If the video source is stopped, ``refresh()`` has no effect. The argument of "
"``refresh ()`` is a flag that indicates if the texture should be "
"recalculated on next refresh. For video playback, you definitively want to "
"set it to True."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:262
msgid "Checking video status"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:264
msgid ""
"Video source classes (such as VideoFFMpeg) have an attribute ``status``. If "
"video is playing, its value is 2, if it's stopped, it's 3. So in our "
"example::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:273
msgid "Advanced work flow"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:275
msgid ""
"True argument in ``Texture.refresh()`` method simply invalidates the image "
"buffer after sending it to the GPU so that on next frame, a new image will "
"be loaded from the source. It has the side effect of making the image "
"unavailable to Python. You can also do it manually by calling the ``refresh "
"()`` method of the source directly."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:281
msgid "Here are some possible advanced work flow:"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:283
msgid "Use the image buffer in Python (does not effect the Texture)::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:293
msgid "Load image from source for Python processing without download to GPU:"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:294
msgid "Note that we do not even call refresh on the Texture."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:295
msgid "We could also just create a source object without a Texture object::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:302
msgid ""
"If you have more than one material on the mesh and you want to modify a "
"texture of one particular material, get its ID::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:308
msgid ""
"GLSL material can have more than one texture channel, identify the texture "
"by the texture slot where it is defined, here two::"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:315
msgid "Advanced demos"
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:317
msgid ""
"Here is a `demo <http://www.graphicall.org/ftp/ben2610/"
"VideoTextureDemo2video.blend>`__ that demonstrates the use of two videos "
"alternatively on the same texture. Note that it requires an additional video "
"file which is the elephant dream teaser. You can replace with another other "
"file that you want to run the demo."
msgstr ""

#: ../../manual/game_engine/python_api/videotexture.rst:322
msgid ""
"Here is a `demo <http://www.graphicall.org/ftp/ben2610/"
"VideoTextureDemo2videoMix.blend>`__ that demonstrates the use of the "
"``ImageMix`` source. ``ImageMix`` is a source that needs sources, which can "
"be any other ``Texture`` source, like ``VideoFFmpeg``, ``ImageFFmpeg`` or "
"``ImageRender``. You set them with ``setSource ()`` and their relative "
"weight with ``setWeight()``. Pay attention that the weight is a short number "
"between 0 and 255, and that the sum of all weights should be 255. "
"``ImageMix`` makes a mix of all the sources according to their weights. The "
"sources must all have the same image size (after reduction to the nearest "
"power of two dimension). If they do not, you get a Python error on the "
"console."
msgstr ""
