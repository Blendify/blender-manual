# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is public domain as CC0
# This file is distributed under the same license as the Blender Reference
# Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr "Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: urko <urkokul@gmail.com>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"X-Generator: Poedit 2.0.2\n"
"Language: uk\n"

#: ../../manual/compositing/types/matte/luminance_key.rst:4
msgid "Luminance Key Node"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:10
msgid "Luminance Key Node."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:12
msgid ""
"The *Luminance Key* node determines background objects from foreground "
"objects by the difference in the luminance (brightness) levels."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:15
msgid ""
"Stock footage of explosions, smoke or debris  are normally shot against a"
" solid, dark background rather than a green screen. This node can "
"separate the foreground effect from the background. It can also be used "
"for sky replacement for over-exposed or gray skies that aren't suitable "
"for chroma keying."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:22
msgid ""
"When compositing footage of something that emits light and has a dark "
"background, like fire, a :doc:`Mix Node </compositing/types/color/mix>` "
"using a *Screen* or *Add* operator will produce better results."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:28
msgid "Inputs"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:32
#: ../../manual/compositing/types/matte/luminance_key.rst:54
msgid "Image"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:31
msgid "Standard image input."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:35
msgid "Properties"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:43
msgid "Limit"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:39
msgid "High"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:39
msgid ""
"Determines the lowest values that are considered foreground. (which is "
"supposed to be -- relatively -- light: from this value to 1.0)."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:43
msgid "Low"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:42
msgid ""
"Determines the highest values that are considered to be background "
"objects. (which is supposed to be -- relatively -- dark: from 0.0 to this"
" value)."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:47
msgid ""
"Brightness levels between the two values form a gradient of transparency "
"between foreground and background objects."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:52
msgid "Outputs"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:55
msgid "Image with an alpha channel adjusted for the keyed selection."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:58
msgid "Matte"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:57
msgid "A black and white alpha mask of the key."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:61
msgid "Example"
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:63
msgid ""
"For this example the model was shot against a *white* background. Using "
"the Luminance Key node, we get a matte out where the background is white,"
" and the model is black; the opposite of what we want. If we wanted to "
"use the matte, we have to switch the white and the black. How to do this?"
" Color Ramp node to the rescue -- we set the left color White Alpha 1.0, "
"and the right color to be Black Alpha 0.0. Thus, when the Color Ramp gets"
" in black, it spits out white, and vice versa. The reversed mask is "
"shown; her white outline is usable as an alpha mask now."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:74
msgid "Using Luma Key with a twist."
msgstr ""

#: ../../manual/compositing/types/matte/luminance_key.rst:77
msgid ""
"Now to mix, we do not really need the *Alpha Over* node; we can just use "
"the mask as our Factor input. In this kinda weird case, we can use the "
"matte directly; we just switch the input nodes. As you can see, since the"
" matte is white (1.0) where we do not want to use the model picture, we "
"feed the background photo to the bottom socket (recall the mix node uses "
"the top socket where the factor is 0.0, and the bottom socket where the "
"factor is 1.0). Feeding our original photo into the top socket means it "
"will be used where the Luminance Key node has spit out Black. Voila, our "
"model is teleported from Atlanta to aboard a cruise ship docked in Miami."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "There is one input to this node, the *Image* that is to be keyed."
#~ msgstr ""

#~ msgid "Control this node using:"
#~ msgstr ""

#~ msgid "Using Luma Key...with a twist"
#~ msgstr ""

#~ msgid "Using Luma Key...with a twist."
#~ msgstr ""

#~ msgid "There is one input to this node:"
#~ msgstr ""

#~ msgid "The image that is to be keyed."
#~ msgstr ""

#~ msgid "Options"
#~ msgstr ""

#~ msgid "Outputs"
#~ msgstr ""

#~ msgid "The outputs of this node are:"
#~ msgstr ""

#~ msgid "Input"
#~ msgstr ""

#~ msgid "Output"
#~ msgstr ""

#~ msgid ""
#~ "For this example the model was "
#~ "shot against a *white* background. Using"
#~ " the Luminance Key node, we get "
#~ "a matte out where the background "
#~ "is white, and the model is black;"
#~ " the opposite of what we want. "
#~ "If we wanted to use the matte, "
#~ "we have to switch the white and"
#~ " the black. How to do this? "
#~ "ColorRamp to the rescue -- we set"
#~ " the left color White Alpha 1.0, "
#~ "and the right color to be Black"
#~ " Alpha 0.0. Thus, when the Color "
#~ "Ramp gets in black, it spits out"
#~ " white, and vice versa. The reversed"
#~ " mask is shown; her white outline "
#~ "is usable as an alpha mask now."
#~ msgstr ""

