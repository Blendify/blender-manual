# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is public domain as CC0
# This file is distributed under the same license as the Blender Reference
# Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr "Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: urko <urkokul@gmail.com>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"X-Generator: Poedit 2.0.2\n"
"Language: uk\n"

#: ../../manual/render/freestyle/python.rst:4
msgid "Python Scripting Mode"
msgstr ""

#: ../../manual/render/freestyle/python.rst:6
msgid ""
"The Python Scripting mode offers full programmability for line "
"stylization. In this control mode, all stylization operations are written"
" as Python scripts referred to as style modules in the Freestyle "
"terminology. The input to a style module is a view map (i.e., a set of "
"detected feature edges), and the output is a set of stylized strokes."
msgstr ""

#: ../../manual/render/freestyle/python.rst:11
msgid ""
"A style module is composed of successive calls of five basic operators: "
"selection, chaining, splitting, sorting and stroke creation. The "
"selection operator identifies a subset of input feature edges based on "
"one or more user-defined selection conditions (predicates). The selected "
"edges are processed with the chaining, splitting and sorting operators to"
" build chains of feature edges. These operators are also controlled by "
"user-supplied predicates and functions in order to determine how to "
"transform the feature edges into chains. Finally, the chains are "
"transformed into stylized strokes by the stroke creation operator, which "
"takes a list of user-defined stroke shaders."
msgstr ""

#: ../../manual/render/freestyle/python.rst:21
msgid ""
"Python style modules are stored within blend-files as text data-blocks. "
"External style module files first need to be loaded in the Text Editor. "
"Then the select menu within an entry of the style module stack allows you"
" to select a module from the list of loaded style modules."
msgstr ""

#: ../../manual/render/freestyle/python.rst:28
msgid ""
"A screen capture of a style module (cartoon.py) loaded in the Text Editor"
" (left), as well as Freestyle options in the Python Scripting mode in the"
" Render Layers buttons (right)."
msgstr ""

#: ../../manual/render/freestyle/python.rst:32
msgid ""
"Freestyle for Blender comes with a number of Python style modules that "
"can serve as a starting point of your own style module writing. See also "
"the section of the Freestyle Python API in the Blender Python API "
"reference manual for the full detail of style module constructs."
msgstr ""

#: ../../manual/render/freestyle/python.rst:42
#: ../../manual/render/freestyle/python.rst:49
msgid "By T.K. using the Python Scripting mode."
msgstr ""

#: ../../manual/render/freestyle/python.rst:44
msgid ""
"(`File:Turning_Pages.zip "
"<https://wiki.blender.org/index.php/File:Turning_Pages.zip>`__, CC0)"
msgstr ""

#: ../../manual/render/freestyle/python.rst:51
msgid ""
"(`File:Lily_Broken_Topology.zip "
"<https://wiki.blender.org/index.php/File:Lily_Broken_Topology.zip>`__, "
"CC0)"
msgstr ""

#: ../../manual/render/freestyle/python.rst:55
msgid "Writing Style Modules"
msgstr ""

#: ../../manual/render/freestyle/python.rst:57
msgid ""
"A style module is a piece of code responsible for the stylization of "
"Freestyle line drawing. The input of a style module is a set of feature "
"edges called view map (ViewMap). The output is a set of stylized lines "
"also referred to as strokes. A style module is structured as a pipeline "
"of operations that allow for building strokes from the input edges within"
" the view map."
msgstr ""

#: ../../manual/render/freestyle/python.rst:63
msgid ""
"There are five kinds of operations (listed with corresponding operator "
"functions):"
msgstr ""

#: ../../manual/render/freestyle/python.rst:66
msgid "Selection ``Operators.select()``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:67
msgid "Chaining ``Operators.chain(), Operators.bidirectional_chain()``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:68
msgid "Splitting ``Operators.sequential_split(), Operators.recursive_split()``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:69
msgid "Sorting ``Operators.sort()``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:70
msgid "Stroke creation ``Operators.create()``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:72
msgid ""
"The input view map is populated with a set of ViewEdge objects. The "
"selection operation is used to pick up ViewEdges of interest to artists "
"based on user-defined selection conditions (predicates). Chaining "
"operations take the subset of ViewEdges and build Chains by concatenating"
" ViewEdges according to user-defined predicates and functions. The Chains"
" can be further refined by splitting them into smaller pieces (e.g., at "
"points where edges make an acute turn) and selecting a fraction of them "
"(e.g., to keep only those longer than a length threshold). The sorting "
"operation is used to arrange the stacking order of chains to draw one "
"line on top of another. The chains are finally transformed into stylized "
"strokes by the stroke creation operation applying a series of stroke "
"shaders to individual chains."
msgstr ""

#: ../../manual/render/freestyle/python.rst:83
msgid ""
"ViewEdges, Chains and Strokes are generically referred to as one-"
"dimensional (1D) elements. A 1D element is a polyline that is a series of"
" connected straight lines. Vertices of 1D elements are called 0D elements"
" in general."
msgstr ""

#: ../../manual/render/freestyle/python.rst:87
msgid ""
"All the operators act on a set of active 1D elements. The initial active "
"set is the set of ViewEdges in the input view map. The active set is "
"updated by the operators."
msgstr ""

#: ../../manual/render/freestyle/python.rst:93
msgid "Selection"
msgstr ""

#: ../../manual/render/freestyle/python.rst:95
msgid ""
"The selection operator goes through every element of the active set and "
"keeps only the ones satisfying a certain predicate. The "
"``Operators.select()`` method takes as the argument a unary predicate "
"that works on any ``Interface1D`` that represents a 1D element. For "
"example::"
msgstr ""

#: ../../manual/render/freestyle/python.rst:104
msgid ""
"This selection operation uses the ``QuantitativeInvisibilityUP1D`` "
"predicate to select only the visible ``ViewEdge`` (more precisely, those "
"whose quantitative invisibility is equal to 0). The selection operator is"
" intended to selectively apply the style to a fraction of the active 1D "
"elements."
msgstr ""

#: ../../manual/render/freestyle/python.rst:108
msgid ""
"It is noted that ``QuantitativeInvisibilityUP1D`` is a class implementing"
" the predicate that tests line visibility, and the ``Operators.select()``"
" method takes an instance of the predicate class as argument. The testing"
" of the predicate for a given 1D element is actually done by calling the "
"predicate instance, that is, by invoking the ``__call__`` method of the "
"predicate class. In other words, the ``Operators.select()`` method takes "
"as argument a functor which in turn takes an ``Interface0D`` object as "
"argument. The Freestyle Python API employs functors extensively to "
"implement predicates, as well as functions."
msgstr ""

#: ../../manual/render/freestyle/python.rst:120
msgid "Chaining"
msgstr ""

#: ../../manual/render/freestyle/python.rst:122
msgid ""
"The chaining operators act on the set of active ``ViewEdge`` objects and "
"determine the topology of the future strokes. The idea is to implement an"
" iterator to traverse the ViewMap graph by marching along ViewEdges. The "
"iterator defines a chaining rule that determines the next ``ViewEdge`` to"
" follow at a given vertex (see ``ViewEdgeIterator``). Several such "
"iterators are provided as part of the Freestyle Python API (see "
"``ChainPredicateIterator`` and ``ChainSilhouetteIterator``). Custom "
"iterators can be defined by inheriting the ``ViewEdgeIterator`` class. "
"The chaining operator also takes as argument a UnaryPredicate working on "
"``Interface1D`` as a stopping criterion. The chaining stops when the "
"iterator has reached a ``ViewEdge`` satisfying this predicate during the "
"march along the graph."
msgstr ""

#: ../../manual/render/freestyle/python.rst:133
msgid ""
"Chaining can be either unidirectional ``Operators.chain()`` or "
"bidirectional ``Operators.bidirectional_chain()``. In the latter case, "
"the chaining will propagate in the two directions from the starting edge."
msgstr ""

#: ../../manual/render/freestyle/python.rst:136
msgid "The following is a code example of bidirectional chaining::"
msgstr ""

#: ../../manual/render/freestyle/python.rst:144
msgid ""
"The chaining operator uses the ``ChainSilhouetteIterator`` as the "
"chaining rule and stops chaining as soon as the iterator has come to an "
"invisible ``ViewEdge``."
msgstr ""

#: ../../manual/render/freestyle/python.rst:147
msgid ""
"The chaining operators process the set of active ``ViewEdge`` objects in "
"order. The active ViewEdges can be previously sorted using the "
"``Operators.sort()`` method (see below). It starts a chain with the first"
" ``ViewEdge`` of the active set. All ViewEdges that have already been "
"involved in the chaining process are marked (in the case of the example "
"above, the time stamp of each ``ViewEdge`` is modified by default), in "
"order not to process the same ``ViewEdge`` twice. Once the chaining "
"reaches a ``ViewEdge`` that satisfies the stopping predicate, the chain "
"is terminated. Then a new chain is started from the first unmarked "
"``ViewEdge`` in the active set. This operation is repeated until the last"
" unmarked ``ViewEdge`` of the active set was processed. At the end of the"
" chaining operation, the active set is set to the Chains that have just "
"been constructed."
msgstr ""

#: ../../manual/render/freestyle/python.rst:162
msgid "Splitting"
msgstr ""

#: ../../manual/render/freestyle/python.rst:164
msgid ""
"The splitting operation is used to refine the topology of each Chain. "
"Splitting is performed either sequentially or recursively. Sequential "
"splitting ``Operators.sequentialSplit()`` in its basic form, parses the "
"Chain at a given arbitrary resolution and evaluates a unary predicate "
"(working on 0D elements) at each point along the Chain. Every time the "
"predicate is satisfied, the chain is split into two chains. At the end of"
" the sequential split operation, the active set of chains is set to the "
"new chains. ::"
msgstr ""

#: ../../manual/render/freestyle/python.rst:176
msgid ""
"In this example, the chain is split every 2 units. A more elaborated "
"version uses two predicates instead of one: One to determine the starting"
" point of the new chain and the other to determine its ending point. This"
" second version can lead to a set of Chains that are disjoint or that "
"overlap if the two predicates are different. (see "
"``Operators.sequentialSplit()`` for more details)."
msgstr ""

#: ../../manual/render/freestyle/python.rst:182
msgid ""
"Recursive splitting ``Operators.recursiveSplit()`` evaluates a function "
"on the 0D elements along the Chain at a given resolution and find the "
"point that gives the maximum value for the function. The Chain is then "
"split into two at that point. This process is recursively repeated on "
"each of the two new Chains, until the input Chain satisfies a user-"
"specified stopping condition. ::"
msgstr ""

#: ../../manual/render/freestyle/python.rst:192
msgid ""
"In the code example above, the Chains are recursively split at points of "
"the highest 2D curvature. The curvature is evaluated at points along the "
"Chain at a resolution of 5 units. Chains shorter than 5 units will not be"
" split anymore."
msgstr ""

#: ../../manual/render/freestyle/python.rst:199
msgid "Sorting"
msgstr ""

#: ../../manual/render/freestyle/python.rst:201
msgid ""
"The sorting operator ``Operators.sort()`` arranges the stacking order of "
"active 1D elements. It takes as argument a binary predicate used as a "
"\"smaller than\" operator to order two 1D elements. ::"
msgstr ""

#: ../../manual/render/freestyle/python.rst:207
msgid ""
"In this code example, the sorting uses the ``Length2DBP1D`` binary "
"predicate to sort the ``Interface1D`` objects in the ascending order in "
"terms of 2D length."
msgstr ""

#: ../../manual/render/freestyle/python.rst:210
msgid ""
"The sorting is particularly useful when combined with causal density. "
"Indeed, the causal density evaluates the density of the resulting image "
"as it is modified. If we wish to use such a tool to decide to remove "
"strokes whenever the local density is too high, it is important to "
"control the order in which the strokes are drawn. In this case, we would "
"use the sorting operator to insure that the most \"important\" lines are "
"drawn first."
msgstr ""

#: ../../manual/render/freestyle/python.rst:218
msgid "Stroke creation"
msgstr ""

#: ../../manual/render/freestyle/python.rst:220
msgid ""
"Finally, the stroke creation operator ``Operators.create()`` takes the "
"active set of Chains as input and build Strokes. The operator takes two "
"arguments. The first is a unary predicate that works on ``Interface1D`` "
"that is designed to make a last selection on the set of chains. A Chain "
"that does not satisfy the condition will not lead to a Stroke. The second"
" input is a list of shaders that will be responsible for the shading of "
"each built stroke. ::"
msgstr ""

#: ../../manual/render/freestyle/python.rst:235
msgid ""
"In this example, the ``DensityUP1D`` predicate is used to remove all "
"Chains whose mean density is higher than 0.1. Each chain is transformed "
"into a stroke by resampling it so as to have a point every 5 units and "
"assigning to it a constant thickness of 2 units and a dark gray constant "
"color."
msgstr ""

#: ../../manual/render/freestyle/python.rst:242
msgid "User control on the pipeline definition"
msgstr ""

#: ../../manual/render/freestyle/python.rst:244
msgid ""
"Style module writing offers different types of user control, even though "
"individual style modules have a fixed pipeline structure. One is the "
"sequencing of different pipeline control structures, and another is "
"through the definition of functor objects that are passed as argument all"
" along the pipeline."
msgstr ""

#: ../../manual/render/freestyle/python.rst:249
msgid ""
"Different pipeline control structures can be defined by sequencing the "
"selection, chaining, splitting, and sorting operations. The stroke "
"creation is always the last operation that concludes a style module."
msgstr ""

#: ../../manual/render/freestyle/python.rst:253
msgid ""
"Predicates, functions, chaining iterators, and stroke shaders can be "
"defined by inheriting base classes and overriding appropriate methods. "
"See the reference manual entries of the following base classes for more "
"information on the user-scriptable constructs."
msgstr ""

#: ../../manual/render/freestyle/python.rst:262
msgid "``UnaryPredicate0D``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:263
msgid "``UnaryPredicate1D``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:264
msgid "``BinaryPredicate0D``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:265
msgid "``BinaryPredicate1D``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:266
msgid "``UnaryFunction0DDouble``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:267
msgid "``UnaryFunction0DEdgeNature``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:268
msgid "``UnaryFunction0DFloat``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:269
msgid "``UnaryFunction0DId``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:270
msgid "``UnaryFunction0DMaterial``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:271
msgid "``UnaryFunction0DUnsigned``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:272
msgid "``UnaryFunction0DVec2f``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:273
msgid "``UnaryFunction0DVec3f``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:274
msgid "``UnaryFunction0DVectorViewShape``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:275
msgid "``UnaryFunction0DViewShape``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:276
msgid "``UnaryFunction1DDouble``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:277
msgid "``UnaryFunction1DEdgeNature``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:278
msgid "``UnaryFunction1DFloat``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:279
msgid "``UnaryFunction1DUnsigned``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:280
msgid "``UnaryFunction1DVec2f``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:281
msgid "``UnaryFunction1DVec3f``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:282
msgid "``UnaryFunction1DVectorViewShape``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:283
msgid "``UnaryFunction1DVoid``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:284
msgid "``ViewEdgeIterator``"
msgstr ""

#: ../../manual/render/freestyle/python.rst:285
msgid "``StrokeShader``"
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "By T.K. using the Python Scripting mode"
#~ msgstr ""

#~ msgid "The following is a code example of bidirectional chaining:"
#~ msgstr ""

#~ msgid "UnaryPredicate0D"
#~ msgstr ""

#~ msgid "UnaryPredicate1D"
#~ msgstr ""

#~ msgid "BinaryPredicate0D"
#~ msgstr ""

#~ msgid "BinaryPredicate1D"
#~ msgstr ""

#~ msgid "UnaryFunction0DDouble"
#~ msgstr ""

#~ msgid "UnaryFunction0DEdgeNature"
#~ msgstr ""

#~ msgid "UnaryFunction0DFloat"
#~ msgstr ""

#~ msgid "UnaryFunction0DId"
#~ msgstr ""

#~ msgid "UnaryFunction0DMaterial"
#~ msgstr ""

#~ msgid "UnaryFunction0DUnsigned"
#~ msgstr ""

#~ msgid "UnaryFunction0DVec2f"
#~ msgstr ""

#~ msgid "UnaryFunction0DVec3f"
#~ msgstr ""

#~ msgid "UnaryFunction0DVectorViewShape"
#~ msgstr ""

#~ msgid "UnaryFunction0DViewShape"
#~ msgstr ""

#~ msgid "UnaryFunction1DDouble"
#~ msgstr ""

#~ msgid "UnaryFunction1DEdgeNature"
#~ msgstr ""

#~ msgid "UnaryFunction1DFloat"
#~ msgstr ""

#~ msgid "UnaryFunction1DUnsigned"
#~ msgstr ""

#~ msgid "UnaryFunction1DVec2f"
#~ msgstr ""

#~ msgid "UnaryFunction1DVec3f"
#~ msgstr ""

#~ msgid "UnaryFunction1DVectorViewShape"
#~ msgstr ""

#~ msgid "UnaryFunction1DVoid"
#~ msgstr ""

#~ msgid "ViewEdgeIterator"
#~ msgstr ""

#~ msgid "StrokeShader"
#~ msgstr ""

