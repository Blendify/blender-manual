..    TODO/Review: {{Review|im=new?}}.

.. _bpy.types.ParticleInstanceModifier:

**************************
Particle Instance Modifier
**************************

When a *Particle Instance* modifier is added to an object, that object will be used
as a particle shape on an object which has a particle system associated with it.
This means that to use this modifier you must have at least one other object
that has a :doc:`Particles System </physics/particles/index>` on it.

.. (wip) T54277

   When a *Particle Instance* modifier is added to an object,
   the mesh of this object will be edited
   by duplicating at the location of the particles of the selected Particle System.

   (this means, it edits mesh, remains one single object, and not "used as a particle shape")

Because of the correlation in which the *Particle Instance* modifier is
influenced by the underlying particle systems on other objects, some of the apparent effects
generated by the modifier can look and act vastly different,
depending on the underlying settings of the particle systems it is associated with.
This is worth taking account of when it seems that the *Particle Instance* modifier settings
do not return the expected results.


Options
=======

.. figure:: /images/modeling_modifiers_simulate_particle-instance_panel.png

   Particle Instance Modifier.

Object
   The name of an object which has a particle system associated with it.

.. (wip) T54277

   This indicates that when the object named in this field emits particles,
   those particles will have the mesh shape of the current *Particle Instance* modifier's mesh.

   (this is not quite correct and unnecessary)

Particle System
   The *Particle System* field is used to select
   which particle system to apply the *Particle Instance* modifier to,
   when the mesh which has the particle system on it has more than one of these.


Create From
-----------

Normal
   When selected, the *Normal* button tells the Particle Instance Modifier
   to draw instances of itself wherever normal particle types are
   emitted from the underlying particle system. So if the current modifier is a sphere shape,
   when normal particles are emitted they will be spheres.
Children
   When selected, the *Children* button tells the modifier
   to draw instances of itself wherever children/child particles are
   emitted/used on the underlying particle system. So if the current modifier is a sphere shape,
   when children/child particles are emitted they will be spheres.
Size
   Scale the instanced objects by the particle size attribute.
   When this is disabled, all the copies appear the same size as the origin.


Show Particles When
-------------------

Unborn
   When selected, the *Unborn* button tells the modifier
   to draw instances of itself wherever unborn particles will be
   emitted/used on the underlying particle system.
   So if the current Particle Instance Modifier is a sphere shape,
   when unborn particles are present they will be spheres.
Alive
   When selected, the *Alive* button tells the modifier
   to draw instances of itself wherever alive particles will be
   emitted/used on the underlying particle system.
   So if the current Particle Instance Modifier is a sphere shape,
   when alive particles are present they will be spheres.
Dead
   When selected, the *Dead* button tells the modifier to draw instances of itself
   wherever dead particles will occur on the underlying particle system.
   So if the current Particle Instance Modifier is a sphere shape,
   when dead particles are present they will be spheres.

------------------------

Space
   World, Local
      Use :term:`World Space`, or :term:`Local Space` of the object (that the particle system is assigned to).

Amount
   The percentage of particles to be used.
   Allows you to randomly skip particles to adjust the amount of particles.

   Offset
      Specifies the "offset" which of the particles will be skipped.
      Allows you to avoid overlapping of the used particles,
      when the same particle system is used in multiple modifier instances.


Using Paths
-----------

By default, the instances are placed depending on the particles position in the current frame.
By enabling this option, you can select the position along the particles path regardless of the current frame.

You can adjust the particles path (using the *Path* visualization type)
on the :doc:`Render </physics/particles/emitter/render>` panel of the Particles System tab.

.. note::

   The particles system must be :doc:`baked </physics/baking>`, except Hair and Keyed physics.

Create Along Paths
   This option tries to make the underlying mesh object of the modifier
   deform its mesh shape in such a way as to try and match the path the particles moves along
   (or hair strands) of the system associated with it.
Rotation Axis
   Specify which pole axis to use for the rotation.

   X, Y, Z
Keep Shape
   Enabling this prevents the object from being deformed
   and places it on the path according to the *Position* value.
Position
   Specify what percentage of the path the object fills,
   or position on the path if the *Keep Shape* option is enabled.
Rotation
   Specifies the rotation around the path.
Random
   Scales the Position/Rotation value of each instance a random value.


Custom Data Layers
------------------

These fields allows you to select vertex color layers,
which will be filled with colors based on the particles information.
These vertex color layers can be used, for example, in a shader to add variance to a material.

Index Layer
   A vertex color layer for values based on the particles index.
Value Layer
   A vertex color layer for random per-particle values.


Examples
========

.. figure:: /images/modeling_modifiers_simulate_particle-instance_split-plane.jpg
   :width: 600px

   Particle Instance modifier example.

The render above shows a single plane mesh object assigned to two different vertex groups
and each of those vertex groups is assigned to a separate and independent particle system,
with each particle system being assigned to a different Particle Instance modifier.
In the case shown the Particle Instance modifiers are a sphere and a cube.
See `example blend-file
<https://en.blender.org/uploads/4/48/Manual_-_Modifiers_-_Particle_Instance_Modifiers_-_Split_Plane.blend>`__.

.. figure:: /images/modeling_modifiers_simulate_particle-instance_create-along-paths.jpg
   :width: 600px

   Create Along Path example.

In this example, a single *Keyed* particle travels through four points (green planes),
on an elliptical path. The *Particle Instance* modifier is added to a cylinder object
and then associated with that *Keyed* particle system.

When the *Create Along Paths* is activated,
instead of the cylinder location just following the position of the particle,
the cylinder mesh is fitted to the shape of the path followed by the particle.
The mesh geometry of the object which is deformed
can have an impact on how well the deformation is carried out.
In the case of the cylinder, it has many loop cuts along its length so
that it can bend at those points to deform along the particle path.

The Particle Instance modifier *Create Along Paths* button works for hair (strand)
particles as well as with keyed particles. In this case the mesh of the Particle Instance modifier
will follow the length and profile of the hair strands paths.

.. note::

   Strands when they are generated instantly die when created so for the *Create Along Paths* button
   to be of any use, you must also have the *Dead* button activated.
   Otherwise the path a mesh has taken will not be visible!
