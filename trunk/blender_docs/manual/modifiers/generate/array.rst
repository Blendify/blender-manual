
**************
Array Modifier
**************

The Array modifier creates an array of copies of the base object, with each copy being offset from the previous
one in any of a number of possible ways. Vertices in adjacent copies can be merged if they are nearby,
allowing smooth :doc:`subsurf </modifiers/generate/subsurf>` frameworks to be generated.

This modifier can be useful when combined with tileable meshes for quickly developing large
scenes. It is also useful for creating complex repetitive shapes.

Multiple array modifiers may be active for an object at the same time
(e.g. to create complex three dimensional constructs).


Options
=======

.. figure:: /images/CZ_ArrayModifier_IF.jpg

   Array modifier.


Fit Type menu
   Controls how the length of the array is determined. There are three choices, activating respectively the
   display of the *Curve*, *Length* or *Count* settings explained below:.

   Fit Curve
      Generates enough copies to fit within the length of the curve object specified in *Curve*.
   Fit Length
      Generates enough copies to fit within the fixed length given by *Length*.
   Fixed Count
      Generates the number of copies specified in *Count*.

Curve
   The Curve object to use for *Fit Curve*.

Length
   The length to use for *Fit Length*.

Count
   The number of duplicates to use for *Fixed Count*.


.. note::

   - Both *Fit Curve* and *Fit Length* use the local coordinate system size of the base object, which means that
     scaling the base object in *Object* mode will not change the number of copies generated by the *Array* modifier.
   - *Fit Length* uses the local coordinate system length of the curve, which means that scaling the curve in
     *Object* mode will not change the number of copies generated by the *Array* modifier.
   - Applying the scale with :kbd:`Ctrl-A` can be useful for each one.


Constant Offset, X, Y, Z
   Adds a constant translation component to the duplicate object's offset.
   X, Y and Z constant components can be specified.

Relative Offset, X, Y, Z
   .. figure:: /images/Dev-Array-Scale_eg.jpg

      Relative offset example.

   Adds a translation equal to the object's bounding box size along each axis, multiplied by a scaling factor,
   to the offset. X, Y and Z scaling factors can be specified.


Object Offset
   .. figure:: /images/Dev_Array_offset_eg.jpg

      Object offset example.

   Adds a transformation taken from an object (relative to the current object) to the offset.
   It is good practice to use an Empty object centered or near to the initial object.
   E.g. by rotating this Empty a circle or helix of objects can be created.


Merge
   If enabled, vertices in each copy will be merged with vertices
   in the next copy that are within the given *Distance*.

First Last
   If enabled **and** *Merge* is enabled, vertices in the first copy will be merged with vertices
   in the last copy (this is useful for circular objects).

   .. list-table::
      *First Last* merge example.

      * - .. figure:: /images/Dev-ArrayModifier-FirstLastDiscontinuity01.jpg
        - .. figure:: /images/Dev-ArrayModifier-FirstLastMerge01.jpg
      * - | Subsurf discontinuity caused by
          | not merging vertices between first
          | and last copies (*First Last* off).
        - | Subsurf discontinuity eliminated
          | by merging vertices between first
          | and last copies (*First Last* on).


Distance
   Controls the merge distance for *Merge*.
Start cap
   The mesh object to be used as a start cap.
   A single copy of this object will be placed at the "beginning" of the array - in fact,
   as if it was in position ``-1``, i.e. one "array step" before the first "regular" array copy.
   Of course, if *Merge* is activated,
   and the *Start cap* is near enough to the first copy, they will be merged.
End cap
   The mesh object to be used as an end cap.
   A single copy of this object will be placed at the "end" of the array - in fact,
   as if it was in position **n+1**, i.e. one "array step" after the last "regular" array copy.
   And as *Start cap*, it can be merged with the last copy...


Hints
=====

Offset Calculation
------------------

The transformation applied from one copy to the next is calculated as the sum of the three
different components (*Relative*, *Constant* and *Object*),
all of which can be enabled/disabled independently of the others. This allows, for example,
a relative offset of ``1.0, 0.0, 0.0`` and a constant offset of ``0.1, 0.0, 0.0``,
giving an array of objects neatly spaced along the X axis with a constant ``0.1``
units between them, whatever the original object's size.


Examples
========

Mechanical
----------

.. list-table::

   * - .. figure:: /images/Blender_Array_Bridge.jpg
          :width: 300px

          A bridge made from a tileable mesh.

     - .. figure:: /images/Dev-ArrayModifier-track01.jpg
          :width: 300px

          A track.
          `Sample blend file <http://wiki.blender.org/index.php/Media:Tracktest.blend>`__

   * - .. figure:: /images/Dev-ArrayModifier-Cog01.jpg
          :width: 300px

          A cog created from a single segment.
          `Blend <http://wiki.blender.org/index.php/Media:Dev-ArrayModifier-Cog01.blend>`__

     - .. figure:: /images/Dev-ArrayModifier-Crankshaft01.jpg
          :width: 300px

          A crankshaft.
          `Sample blend file <http://wiki.blender.org/index.php/Media:Dev-ArrayModifier-Crankshaft01.blend>`__

   * - .. figure:: /images/Dev-ArrayModifier-Chain01.jpg
          :width: 300px

          A chain created from a single link.
          `Sample blend file <http://wiki.blender.org/index.php/Media:Dev-ArrayModifier-Chain01.blend>`__

     -


Fractal
-------

.. list-table::

   * - .. figure:: /images/Dev_Array_Multi_Dimension.jpg
          :width: 300px

          Multi-level array animated with motion blur.

     - .. figure:: /images/Dev-ArrayModifier-Fractal01.jpg
          :width: 300px

          Fractal created with multiple arrays.
          `Blend <http://wiki.blender.org/index.php/Media:Dev-ArrayModifier-Fractal01.blend>`__

   * - .. figure:: /images/Dev-ArrayModifier_Fractal_11.jpg
          :width: 300px

          A fractal fern image created with 2 array modifiers and 1 mirror applied to a cube.

     -


Organic
-------

.. list-table::

   * - .. figure:: /images/Dev_Array_Fractal_example.jpg
          :width: 300px

          Fig 01

     - .. figure:: /images/Dev-ArrayModifier-Spiral01.jpg
          :width: 300px

          Fig 02

   * - .. figure:: /images/Manual-Modifier-Array-Tentacle01.jpg
          :width: 600px

          Fig 03

     -


Fig 01
   Subsurfed cube array with 1 object offset, 4 cubes and a high vertex merge setting to give the effect of skinning.
Fig 02
   A double spiral created with two array modifiers and one subsurf modifier applied to a cube.
   As above, the vertex merge threshold is set very high to give the effect of skinning.
   `Sample blend file <http://wiki.blender.org/index.php/Media:Dev-ArrayModifier-Spiral01.blend>`__
Fig 03
   A tentacle created with an Array modifier followed by a Curve modifier.
   The segment in the foreground is the base mesh for the tentacle; the tentacle is capped by two
   specially-modeled objects deformed by the same Curve object as the main part of the tentacle.
   `Sample blend file <http://wiki.blender.org/index.php/Media:Manual-Modifier-Array-Tentacle01.blend>`__


Tutorials
=========

- `Neal Hirsig's Array Modifier Screencast on Vimeo <http://vimeo.com/46061877>`__
- `Creating A Double Helix With Modifiers <http://wiki.blender.org/index.php/Doc:2.4/Tutorials/Modifiers/A_Double_Helix>`__

The 'Double Helix' tutorial explains the Array modifier.
It is for an old Blender Version (2.44) but except for the keyboard
shortcuts it is still valid.
